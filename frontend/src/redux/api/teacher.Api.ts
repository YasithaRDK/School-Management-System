import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { ITeacher, ITeacherUpdatePayload } from "../../types/teacher.types";

// API slice for managing teachers
export const teacherApi = createApi({
  reducerPath: "teacherApi", // Unique key for the API slice
  baseQuery: fetchBaseQuery({
    baseUrl: import.meta.env.VITE_APP_API_URL, // Use environment variable for base URL
  }),
  tagTypes: ["Teacher"], // Tag for cache invalidation
  endpoints: (builder) => ({
    // Fetch all teachers
    getTeachers: builder.query<ITeacher[], void>({
      query: () => "teachers",
      providesTags: (result) =>
        result
          ? [
              ...result.map(
                (teacher) =>
                  ({ type: "Teacher", id: teacher.teacherId }) as const
              ),
              { type: "Teacher" as const },
            ]
          : [{ type: "Teacher" as const }],
    }),

    // Fetch a teacher by ID
    getTeacherById: builder.query<ITeacher, number>({
      query: (id) => `teachers/${id}`,
      providesTags: (result, error, id) => [{ type: "Teacher", id }],
    }),

    // Create a new teacher
    createTeacher: builder.mutation<ITeacher, Partial<ITeacher>>({
      query: (data) => ({
        url: "teachers",
        method: "POST",
        body: data,
      }),
      invalidatesTags: [{ type: "Teacher" }],
    }),

    // Update an existing teacher
    updateTeacher: builder.mutation<ITeacher, ITeacherUpdatePayload>({
      query: ({ id, data }) => ({
        url: `teachers/${id}`,
        method: "PUT",
        body: data,
      }),
      invalidatesTags: (result, error, { id }) => [{ type: "Teacher", id }],
    }),

    // Delete a teacher
    deleteTeacher: builder.mutation<void, number>({
      query: (id) => ({
        url: `teachers/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, id) => [{ type: "Teacher", id }],
    }),
  }),
});

// Export hooks generated by the API slice
export const {
  useGetTeachersQuery,
  useGetTeacherByIdQuery,
  useCreateTeacherMutation,
  useUpdateTeacherMutation,
  useDeleteTeacherMutation,
} = teacherApi;
