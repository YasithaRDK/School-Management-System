import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { IStudent, IStudentUpdatePayload } from "../../types/student.types";

// API slice for managing students
export const studentApi = createApi({
  reducerPath: "studentApi", // Unique key for the API slice
  baseQuery: fetchBaseQuery({
    baseUrl: import.meta.env.VITE_APP_API_URL, // Use environment variable for base URL
  }),
  tagTypes: ["Student"], // Tag for cache invalidation
  endpoints: (builder) => ({
    // Fetch all students
    getStudents: builder.query<IStudent[], void>({
      query: () => "students",
      providesTags: (result) =>
        result
          ? [
              ...result.map(
                (student) =>
                  ({ type: "Student", id: student.studentId }) as const
              ),
              { type: "Student" as const },
            ]
          : [{ type: "Student" as const }],
    }),

    // Fetch a student by ID
    getStudentById: builder.query<IStudent, number>({
      query: (id) => `students/${id}`,
      providesTags: (result, error, id) => [{ type: "Student", id }],
    }),

    // Create a new student
    createStudent: builder.mutation<IStudent, Partial<IStudent>>({
      query: (data) => ({
        url: "students",
        method: "POST",
        body: data,
      }),
      invalidatesTags: [{ type: "Student" }],
    }),

    // Update an existing student
    updateStudent: builder.mutation<IStudent, IStudentUpdatePayload>({
      query: ({ id, data }) => ({
        url: `students/${id}`,
        method: "PUT",
        body: data,
      }),
      invalidatesTags: (result, error, { id }) => [{ type: "Student", id }],
    }),

    // Delete a student
    deleteStudent: builder.mutation<void, number>({
      query: (id) => ({
        url: `students/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, id) => [{ type: "Student", id }],
    }),
  }),
});

// Export hooks generated by the API slice
export const {
  useGetStudentsQuery,
  useGetStudentByIdQuery,
  useCreateStudentMutation,
  useUpdateStudentMutation,
  useDeleteStudentMutation,
} = studentApi;
