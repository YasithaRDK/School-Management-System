import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { ISubject, ISubjectUpdatePayload } from "../../types/subject.types";

// API slice for managing subjects
export const subjectApi = createApi({
  reducerPath: "subjectApi", // Unique key for the API slice
  baseQuery: fetchBaseQuery({
    baseUrl: import.meta.env.VITE_APP_API_URL, // Use environment variable for base URL
  }),
  tagTypes: ["Subject"], // Tag for cache invalidation
  endpoints: (builder) => ({
    // Fetch all subjects
    getSubjects: builder.query<ISubject[], void>({
      query: () => "subjects",
      providesTags: (result) =>
        result
          ? [
              ...result.map(
                (subject) =>
                  ({ type: "Subject", id: subject.subjectId }) as const
              ),
              { type: "Subject" as const },
            ]
          : [{ type: "Subject" as const }],
    }),

    // Fetch a subject by ID
    getSubjectById: builder.query<ISubject, number>({
      query: (id) => `subjects/${id}`,
      providesTags: (result, error, id) => [{ type: "Subject", id }],
    }),

    // Create a new subject
    createSubject: builder.mutation<ISubject, Partial<ISubject>>({
      query: (data) => ({
        url: "subjects",
        method: "POST",
        body: data,
      }),
      invalidatesTags: [{ type: "Subject" }],
    }),

    // Update an existing subject
    updateSubject: builder.mutation<ISubject, ISubjectUpdatePayload>({
      query: ({ id, data }) => ({
        url: `subjects/${id}`,
        method: "PUT",
        body: data,
      }),
      invalidatesTags: (result, error, { id }) => [{ type: "Subject", id }],
    }),

    // Delete a subject
    deleteSubject: builder.mutation<void, number>({
      query: (id) => ({
        url: `subjects/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, id) => [{ type: "Subject", id }],
    }),
  }),
});

// Export hooks generated by the API slice
export const {
  useGetSubjectsQuery,
  useGetSubjectByIdQuery,
  useCreateSubjectMutation,
  useUpdateSubjectMutation,
  useDeleteSubjectMutation,
} = subjectApi;
