import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import {
  IAllocateSubject,
  IAllocateSubjectRequest,
} from "../../types/allocateSubject.types";

// API slice for managing allocateSubjects
export const allocateSubjectApi = createApi({
  reducerPath: "allocateSubjectApi", // Unique key for the API slice
  baseQuery: fetchBaseQuery({
    baseUrl: import.meta.env.VITE_APP_API_URL, // Use environment variable for base URL
  }),
  tagTypes: ["AllocateSubject"], // Tag for cache invalidation
  endpoints: (builder) => ({
    // Fetch allocated subjects for a specific teacher by teacherId
    getAllocateSubjectsByTeacherId: builder.query<IAllocateSubject, number>({
      query: (teacherId) => `teacher-subject/${teacherId}`,
      providesTags: (result, error, teacherId) => [
        { type: "AllocateSubject", id: teacherId },
      ],
    }),

    // Allocate a subject to a teacher
    createAllocateSubject: builder.mutation<void, IAllocateSubjectRequest>({
      query: (data) => ({
        url: "teacher-subject",
        method: "POST",
        body: data,
      }),
      invalidatesTags: [{ type: "AllocateSubject" }],
    }),

    // Delete an allocated subject by teacherId and subjectId
    deleteAllocateSubject: builder.mutation<
      void,
      { teacherId: number; subjectId: number }
    >({
      query: ({ teacherId, subjectId }) => ({
        url: `teacher-subject/${teacherId}/${subjectId}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, { teacherId, subjectId }) => [
        { type: "AllocateSubject", id: teacherId },
        { type: "AllocateSubject", id: subjectId },
      ],
    }),
  }),
});

// Export hooks generated by the API slice
export const {
  useGetAllocateSubjectsByTeacherIdQuery,
  useCreateAllocateSubjectMutation,
  useDeleteAllocateSubjectMutation,
} = allocateSubjectApi;
